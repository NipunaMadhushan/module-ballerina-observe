/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'io.ballerina.plugin'

description = 'Ballerina - Observability'

def packageName = "observe"
def packageOrg = "ballerina"

def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars {
        transitive false
    }
}

dependencies {
    externalJars(group: 'org.testng', name: 'testng', version: "${testngVersion}")
}

task updateTomlFiles {
    doLast {
        def stdlibDependentTestngVersion = project.testngVersion
        def openTelemetryVersion = project.openTelemetryVersion
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace("@testng.version@", stdlibDependentTestngVersion)
        newBallerinaToml = newBallerinaToml.replace("@opentelemetry.version@", openTelemetryVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit Ballerina.toml Dependencies.toml -m \"[Automated] Update the native jar versions\""
            } else {
                commandLine 'sh', '-c', "git commit Ballerina.toml Dependencies.toml -m '[Automated] Update the native jar versions'"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/NipunaMadhushan/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) { task ->
    task.doFirst {
        logger.lifecycle("Attempting to publish ${task.publication.groupId}:${task.publication.artifactId}:${task.publication.version}")
    }
    task.onlyIf { true }
}

tasks.withType(PublishToMavenRepository) { task ->
    task.outputs.upToDateWhen { false }  // Always run the task
    task.doLast {
        if (task.state.failure?.cause?.message?.contains('409')) {
            logger.warn("409 Conflict encountered for ${task.publication.groupId}:${task.publication.artifactId}:${task.publication.version}. Skipping publication.")
            task.state.outcome = TaskOutcome.SKIPPED
            task.state.failure = null
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn(":observe-native:build")
build.dependsOn(":observe-ballerina:generatePomFileForMavenPublication")
build.finalizedBy(":observe-ballerina-tests:build")
test.finalizedBy(":observe-ballerina-tests:build")

publishToMavenLocal.dependsOn build
publish.dependsOn build
